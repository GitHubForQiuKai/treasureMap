(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{505:function(_,v,e){"use strict";e.r(v);var o=e(4),t=Object(o.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("p",[_._v("Promise表示一个异步操作的最终结果。与Promise最主要的交互方法是通过将函数传入它的then方法从而获取得Promise最终的值或Promise最终最拒绝（reject）的原因。")]),_._v(" "),e("h2",{attrs:{id:"_1-术语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-术语"}},[_._v("#")]),_._v(" 1. 术语")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("promise")]),_._v("是一个包含了兼容本规范和"),e("code",[_._v("then")]),_._v("方法的对象或函数，")]),_._v(" "),e("li",[e("code",[_._v("thenable")]),_._v(" 是一个包含了"),e("code",[_._v("then")]),_._v("方法的对象或函数。")]),_._v(" "),e("li",[e("code",[_._v("value")]),_._v(" 是任何"),e("code",[_._v("Javascript")]),_._v("值。 (包括 "),e("code",[_._v("undefined")]),_._v(", "),e("code",[_._v("thenable")]),_._v(", "),e("code",[_._v("promise")]),_._v("等).")]),_._v(" "),e("li",[e("code",[_._v("exception")]),_._v(" 是由"),e("code",[_._v("throw")]),_._v("表达式抛出来的值。")]),_._v(" "),e("li",[e("code",[_._v("reason")]),_._v(" 是一个用于描述"),e("code",[_._v("Promise")]),_._v("被拒绝原因的值。")])]),_._v(" "),e("h2",{attrs:{id:"_2-要求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-要求"}},[_._v("#")]),_._v(" 2. 要求")]),_._v(" "),e("h3",{attrs:{id:"_2-1-promise状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-promise状态"}},[_._v("#")]),_._v(" 2.1 Promise状态")]),_._v(" "),e("p",[_._v("一个"),e("code",[_._v("Promise")]),_._v("必须处在其中之一的状态："),e("strong",[_._v("pending")]),_._v(", "),e("strong",[_._v("fulfilled")]),_._v(" 或 "),e("strong",[_._v("rejected")]),_._v(".")]),_._v(" "),e("ol",[e("li",[_._v("如果是"),e("strong",[_._v("pending")]),_._v("状态,则"),e("code",[_._v("promise")]),_._v("：\n"),e("ol",[e("li",[_._v("可以转换到"),e("strong",[_._v("fulfilled")]),_._v("或"),e("strong",[_._v("rejected")]),_._v("状态。")])])]),_._v(" "),e("li",[_._v("如果是"),e("strong",[_._v("fulfilled")]),_._v("状态,则"),e("code",[_._v("promise")]),_._v("：\n"),e("ol",[e("li",[_._v("不能转换成任何其它状态。")]),_._v(" "),e("li",[_._v("必须有一个"),e("code",[_._v("value")]),_._v("，且这个值不能被改变。")])])]),_._v(" "),e("li",[_._v("如果是"),e("strong",[_._v("rejected")]),_._v("状态,则"),e("code",[_._v("promise")]),_._v("可以：\n"),e("ol",[e("li",[_._v("不能转换成任何其它状态。")]),_._v(" "),e("li",[_._v("必须有一个"),e("code",[_._v("reason")]),_._v("，且这个值不能被改变。")])])])]),_._v(" "),e("p",[e("strong",[_._v("值不能被改变")]),_._v("指的是其"),e("code",[_._v("identity")]),_._v("不能被改变，而不是指其成员内容不能被改变。")]),_._v(" "),e("h3",{attrs:{id:"_2-2-then-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-then-方法"}},[_._v("#")]),_._v(" 2.2 "),e("code",[_._v("then")]),_._v(" 方法")]),_._v(" "),e("p",[_._v("一个"),e("code",[_._v("Promise")]),_._v("必须提供一个"),e("code",[_._v("then")]),_._v("方法来获取其"),e("code",[_._v("value")]),_._v("或"),e("code",[_._v("resaon")]),_._v("。")]),_._v(" "),e("p",[e("code",[_._v("Promise")]),_._v("的"),e("code",[_._v("then")]),_._v("方法接受两个参数：")]),_._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[_._v("promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[_._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("onFulfilled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" onRejected"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),_._v("\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("ol",[e("li",[e("code",[_._v("onFulfilled")]),_._v(" 和 "),e("code",[_._v("onRejected")]),_._v(" 都是可选参数：\n"),e("ol",[e("li",[_._v("如果"),e("code",[_._v("onFulfilled")]),_._v("不是一个函数，则忽略之。")]),_._v(" "),e("li",[_._v("如果"),e("code",[_._v("onRejected")]),_._v("不是一个函数，则忽略之。")])])]),_._v(" "),e("li",[_._v("如果"),e("code",[_._v("onFulfilled")]),_._v("是一个函数:\n"),e("ol",[e("li",[_._v("它必须在"),e("code",[_._v("promise")]),_._v(" "),e("strong",[_._v("fulfilled")]),_._v("后调用， 且"),e("code",[_._v("promise")]),_._v("的"),e("code",[_._v("value")]),_._v("为其第一个参数。")]),_._v(" "),e("li",[_._v("它不能在"),e("code",[_._v("promise")]),_._v(" "),e("strong",[_._v("fulfilled")]),_._v("前调用。")]),_._v(" "),e("li",[_._v("不能被多次调用。")])])]),_._v(" "),e("li",[_._v("如果"),e("code",[_._v("onRejected")]),_._v("是一个函数,\n"),e("ol",[e("li",[_._v("它必须在"),e("code",[_._v("promise")]),_._v(" "),e("strong",[_._v("rejected")]),_._v("后调用， 且"),e("code",[_._v("promise")]),_._v("的"),e("code",[_._v("reason")]),_._v("为其第一个参数。")]),_._v(" "),e("li",[_._v("它不能在"),e("code",[_._v("promise")]),_._v(" "),e("strong",[_._v("rejected")]),_._v("前调用。")]),_._v(" "),e("li",[_._v("不能被多次调用。")])])]),_._v(" "),e("li",[e("code",[_._v("onFulfilled")]),_._v(" 和 "),e("code",[_._v("onRejected")]),_._v(" 只允许在 "),e("a",{attrs:{href:"https://es5.github.io/#x10.3",target:"_blank",rel:"noopener noreferrer"}},[_._v("execution context"),e("OutboundLink")],1),_._v(" 栈仅包含平台代码时运行. ["),e("a",{attrs:{rel:"nofollow",target:"_blank"}},[_._v("3.1")]),_._v("].")]),_._v(" "),e("li",[e("code",[_._v("onFulfilled")]),_._v(" 和 "),e("code",[_._v("onRejected")]),_._v(" 必须被当做函数调用 (i.e. 即函数体内的 "),e("code",[_._v("this")]),_._v(" 为"),e("code",[_._v("undefined")]),_._v("). ["),e("a",{attrs:{rel:"nofollow",target:"_blank"}},[_._v("3.2")]),_._v("]")]),_._v(" "),e("li",[_._v("对于一个"),e("code",[_._v("promise")]),_._v("，它的"),e("code",[_._v("then")]),_._v("方法可以调用多次.\n"),e("ol",[e("li",[_._v("当"),e("code",[_._v("promise")]),_._v(" "),e("strong",[_._v("fulfilled")]),_._v("后，所有"),e("code",[_._v("onFulfilled")]),_._v("都必须按照其"),e("strong",[_._v("注册顺序")]),_._v("执行。")]),_._v(" "),e("li",[_._v("当"),e("code",[_._v("promise")]),_._v(" "),e("strong",[_._v("rejected")]),_._v("后，所有"),e("code",[_._v("OnRejected")]),_._v("都必须按照其"),e("strong",[_._v("注册顺序")]),_._v("执行。")])])]),_._v(" "),e("li",[e("code",[_._v("then")]),_._v(" 必须返回一个"),e("code",[_._v("promise")]),_._v(" ["),e("a",{attrs:{rel:"nofollow",target:"_blank"}},[_._v("3.3")]),_._v("]."),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[_._v("promise2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" promise1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[_._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),_._v("onFulfilled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(",")]),_._v(" onRejected"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("ol",[e("li",[_._v("如果"),e("code",[_._v("onFulfilled")]),_._v(" 或 "),e("code",[_._v("onRejected")]),_._v(" 返回了值"),e("code",[_._v("x")]),_._v(", 则执行"),e("code",[_._v("Promise")]),_._v(" 解析流程"),e("code",[_._v("[[Resolve]](promise2, x)")]),_._v(".")]),_._v(" "),e("li",[_._v("如果"),e("code",[_._v("onFulfilled")]),_._v(" 或 "),e("code",[_._v("onRejected")]),_._v("抛出了异常"),e("code",[_._v("e")]),_._v(", 则"),e("code",[_._v("promise2")]),_._v("应当以"),e("code",[_._v("e")]),_._v("为"),e("code",[_._v("reason")]),_._v("被拒绝。")]),_._v(" "),e("li",[_._v("如果"),e("code",[_._v("onFulfilled")]),_._v(" 不是一个函数且"),e("code",[_._v("promise1")]),_._v("已经"),e("strong",[_._v("fulfilled")]),_._v("，则"),e("code",[_._v("promise2")]),_._v("必须以"),e("code",[_._v("promise1")]),_._v("的"),e("code",[_._v("value")]),_._v("被 fulfill.")]),_._v(" "),e("li",[_._v("如果"),e("code",[_._v("onRejected")]),_._v(" 不是一个函数且"),e("code",[_._v("promise1")]),_._v("已经"),e("strong",[_._v("rejected")]),_._v(", 则"),e("code",[_._v("promise2")]),_._v("必须以以"),e("code",[_._v("promise1")]),_._v("的"),e("code",[_._v("reason")]),_._v("被 reject.")])])])]),_._v(" "),e("h3",{attrs:{id:"_2-3-promise解析过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-promise解析过程"}},[_._v("#")]),_._v(" 2.3 Promise解析过程")]),_._v(" "),e("p",[e("strong",[_._v("Promise解析过程")]),_._v(" 是以一个"),e("code",[_._v("promise")]),_._v("和一个值做为参数的抽象过程，可表示为"),e("code",[_._v("[[Resolve]](promise, x)")]),_._v(". 过程如下；")]),_._v(" "),e("ol",[e("li",[e("p",[_._v("如果"),e("code",[_._v("promise")]),_._v(" 和 "),e("code",[_._v("x")]),_._v(" 指向相同的值, 使用 "),e("code",[_._v("TypeError")]),_._v("做为原因将"),e("code",[_._v("promise")]),_._v("拒绝。")])]),_._v(" "),e("li",[e("p",[_._v("如果 "),e("code",[_._v("x")]),_._v(" 是一个"),e("code",[_._v("promise")]),_._v(", 采用其状态 ["),e("a",{attrs:{rel:"nofollow",target:"_blank"}},[_._v("3.4")]),_._v("]:")]),_._v(" "),e("ol",[e("li",[_._v("如果"),e("code",[_._v("x")]),_._v("是"),e("strong",[_._v("pending")]),_._v("状态，"),e("code",[_._v("promise")]),_._v("必须保持"),e("strong",[_._v("pending")]),_._v("走到"),e("code",[_._v("x")]),_._v(" "),e("strong",[_._v("fulfilled")]),_._v("或"),e("strong",[_._v("rejected")]),_._v(".")]),_._v(" "),e("li",[_._v("如果"),e("code",[_._v("x")]),_._v("是"),e("strong",[_._v("fulfilled")]),_._v("状态，将"),e("code",[_._v("x")]),_._v("的值用于fulfill "),e("code",[_._v("promise")]),_._v(".")]),_._v(" "),e("li",[_._v("如果"),e("code",[_._v("x")]),_._v("是"),e("strong",[_._v("rejected")]),_._v("状态, 将"),e("code",[_._v("x")]),_._v("的原因用于reject "),e("code",[_._v("promise")]),_._v("..")])])]),_._v(" "),e("li",[e("p",[_._v("如果"),e("code",[_._v("x")]),_._v("是一个对象或一个函数：")]),_._v(" "),e("ol",[e("li",[_._v("将 "),e("code",[_._v("then")]),_._v(" 赋为 "),e("code",[_._v("x.then")]),_._v(". ["),e("a",{attrs:{rel:"nofollow",target:"_blank"}},[_._v("3.5")]),_._v("]")]),_._v(" "),e("li",[_._v("如果在取"),e("code",[_._v("x.then")]),_._v("值时抛出了异常，则以这个异常做为原因将"),e("code",[_._v("promise")]),_._v("拒绝。")]),_._v(" "),e("li",[_._v("如果 "),e("code",[_._v("then")]),_._v(" 是一个函数， 以"),e("code",[_._v("x")]),_._v("为"),e("code",[_._v("this")]),_._v("调用"),e("code",[_._v("then")]),_._v("函数， 且第一个参数是"),e("code",[_._v("resolvePromise")]),_._v("，第二个参数是"),e("code",[_._v("rejectPromise")]),_._v("，且：\n"),e("ol",[e("li",[_._v("当 "),e("code",[_._v("resolvePromise")]),_._v(" 被以 "),e("code",[_._v("y")]),_._v("为参数调用, 执行 "),e("code",[_._v("[[Resolve]](promise, y)")]),_._v(".")]),_._v(" "),e("li",[_._v("当 "),e("code",[_._v("rejectPromise")]),_._v(" 被以 "),e("code",[_._v("r")]),_._v(" 为参数调用, 则以"),e("code",[_._v("r")]),_._v("为原因将"),e("code",[_._v("promise")]),_._v("拒绝。")]),_._v(" "),e("li",[_._v("如果 "),e("code",[_._v("resolvePromise")]),_._v(" 和 "),e("code",[_._v("rejectPromise")]),_._v(" 都被调用了，或者被调用了多次，则只第一次有效，后面的忽略。")]),_._v(" "),e("li",[_._v("如果在调用"),e("code",[_._v("then")]),_._v("时抛出了异常，则：\n"),e("ol",[e("li",[_._v("如果 "),e("code",[_._v("resolvePromise")]),_._v(" 或 "),e("code",[_._v("rejectPromise")]),_._v(" 已经被调用了，则忽略它。")]),_._v(" "),e("li",[_._v("否则, 以"),e("code",[_._v("e")]),_._v("为"),e("code",[_._v("reason")]),_._v("将 "),e("code",[_._v("promise")]),_._v(" 拒绝。")])])])])]),_._v(" "),e("li",[_._v("如果 "),e("code",[_._v("then")]),_._v("不是一个函数，则 以"),e("code",[_._v("x")]),_._v("为值fulfill  "),e("code",[_._v("promise")]),_._v("。")])])]),_._v(" "),e("li",[e("p",[_._v("如果 "),e("code",[_._v("x")]),_._v(" 不是对象也不是函数，则以"),e("code",[_._v("x")]),_._v("为值 fulfill "),e("code",[_._v("promise")]),_._v("。")])])]),_._v(" "),e("h2",{attrs:{id:"_3-注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-注解"}},[_._v("#")]),_._v(" 3. 注解")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("3.1.")]),_._v(" 这里“平台代码”意味着引擎、环境以及"),e("code",[_._v("promise")]),_._v("的实现代码。在实践中，这需要确保"),e("code",[_._v("onFulfilled")]),_._v("和"),e("code",[_._v("onRejected")]),_._v("异步地执行，并且应该在"),e("code",[_._v("then")]),_._v("方法被调用的那一轮事件循环之后用新的执行栈执行。这可以用如"),e("code",[_._v("setTimeout")]),_._v("或"),e("code",[_._v("setImmediate")]),_._v("这样的“宏任务”机制实现，或者用如"),e("code",[_._v("MutationObserver")]),_._v("或"),e("code",[_._v("process.nextTick")]),_._v("这样的“微任务”机制实现。由于"),e("code",[_._v("promise")]),_._v("的实现被考虑为“平台代码”，因此在自身处理程序被调用时可能已经包含一个任务调度队列。")]),_._v(" "),e("li",[e("strong",[_._v("3.2.")]),_._v(" 严格模式下，它们中的"),e("code",[_._v("this")]),_._v("将会是"),e("code",[_._v("undefined")]),_._v("；在非严格模式，"),e("code",[_._v("this")]),_._v("将会是全局对象。")]),_._v(" "),e("li",[e("strong",[_._v("3.3.")]),_._v(" 假如实现满足所有需求，可以允许"),e("code",[_._v("promise2 === promise1")]),_._v("。每一个实现都应该记录是否能够产生"),e("code",[_._v("promise2 === promise1")]),_._v("以及什么情况下会出现"),e("code",[_._v("promise2 === promise1")]),_._v("。")]),_._v(" "),e("li",[e("strong",[_._v("3.4.")]),_._v(" 通常，只有"),e("code",[_._v("x")]),_._v("来自于当前实现，才知道它是一个真正的"),e("code",[_._v("promise")]),_._v("。这条规则允许那些特例实现采用符合已知要求的"),e("code",[_._v("Promise")]),_._v("的状态。")]),_._v(" "),e("li",[e("strong",[_._v("3.5.")]),_._v(" 这个程序首先存储"),e("code",[_._v("x.then")]),_._v("的引用，之后测试那个引用，然后再调用那个引用，这样避免了多次访问"),e("code",[_._v("x.then")]),_._v("属性。此类预防措施对于确保访问者属性的一致性非常重要，因为访问者属性的值可能在俩次检索之间发生变化。")]),_._v(" "),e("li",[e("strong",[_._v("3.6.")]),_._v(" 实现不应该在"),e("code",[_._v("thenable")]),_._v("链的深度上做任意限制，并且假设超过那个任意限制将会无限递归。只有真正的循环才应该引发一个"),e("code",[_._v("TypeError")]),_._v("；如果遇到一个无限循环的"),e("code",[_._v("thenable")]),_._v("，永远执行递归是正确的行为。")])]),_._v(" "),e("h2",{attrs:{id:"补充"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[_._v("#")]),_._v(" 补充")]),_._v(" "),e("p",[e("strong",[_._v("Promise/A+并未规范race、all、catch方法，这些是ES6自己规范的。")])]),_._v(" "),e("p",[e("a",{attrs:{href:"http://promisesaplus.com",target:"_blank",rel:"noopener noreferrer"}},[_._v("英文原文地址"),e("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=t.exports}}]);