(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{514:function(t,e,a){"use strict";a.r(e);var l=a(4),i=Object(l.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),a("ul",[a("li",[t._v("虚拟dom轻量、快速，减少真实dom的操作和刷新次数")]),t._v(" "),a("li",[t._v("跨平台，在渲染层将虚拟dom的更新转换为不同平台的操作")]),t._v(" "),a("li",[t._v("兼容性，加入增强兼容性的代码")])]),t._v(" "),a("h2",{attrs:{id:"diff算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diff算法"}},[t._v("#")]),t._v(" diff算法")]),t._v(" "),a("ul",[a("li",[t._v("必要性：diff算法是虚拟dom的必要产物(lifecycle.js - updateCompent)\n"),a("ul",[a("li",[t._v("一个组件对应一个watcher")]),t._v(" "),a("li",[t._v("一个组件中的data对应多个key")]),t._v(" "),a("li",[t._v("当key变化时，才进行diff算法，进行最小化更新")])])]),t._v(" "),a("li",[t._v("高效性：深度优先，同层比较（patch.js -> patchVNode）\n"),a("ul",[a("li",[t._v("先分别两两比较新旧节点的头尾（4次比较） (patch.js -> updateChildren)")])])])])])}),[],!1,null,null,null);e.default=i.exports}}]);