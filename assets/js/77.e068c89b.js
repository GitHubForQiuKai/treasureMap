(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{570:function(a,t,v){"use strict";v.r(t);var _=v(4),r=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("p",[a._v("浏览器实现一般存在以下线程")]),a._v(" "),v("ul",[v("li",[a._v("GUI 渲染线程")]),a._v(" "),v("li",[a._v("JavaScript引擎线程")]),a._v(" "),v("li",[a._v("定时触发器线程")]),a._v(" "),v("li",[a._v("事件触发线程")]),a._v(" "),v("li",[a._v("XHR请求线程")])]),a._v(" "),v("h2",{attrs:{id:"gui-渲染线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#gui-渲染线程"}},[a._v("#")]),a._v(" GUI 渲染线程")]),a._v(" "),v("ul",[v("li",[a._v("GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或重排（Reflow）时,该线程就会执行。")])]),a._v(" "),v("h2",{attrs:{id:"javascript引擎线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#javascript引擎线程"}},[a._v("#")]),a._v(" JavaScript引擎线程")]),a._v(" "),v("ul",[v("li",[a._v("JavaScript引擎是基于事件驱动单线程的。")])]),a._v(" "),v("h2",{attrs:{id:"为什么javascript要是单线程的？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么javascript要是单线程的？"}},[a._v("#")]),a._v(" 为什么Javascript要是单线程的？")]),a._v(" "),v("p",[a._v("这是因为Javascript这门脚本语言诞生的使命所致：JavaScript为处理页面中用户的交互，以及操作DOM树、CSS样式树来给用户呈现一份动态而丰富的交互体验和服务器逻辑的交互处理。如果JavaScript是多线程的方式来操作这些UI DOM，则可能出现UI操作的冲突； 如果Javascript是多线程的话，在多线程的交互下，处于UI中的DOM节点就可能成为一个临界资源，假设存在两个线程同时操作一个DOM，一个负责修改一个负责删除，那么这个时候就需要浏览器来裁决如何生效哪个线程的执行结果。当然我们可以通过锁来解决上面的问题。但为了避免因为引入了锁而带来更大的复杂性，Javascript在最初就选择了单线程执行。")]),a._v(" "),v("h2",{attrs:{id:"gui-渲染线程-与-javascript引擎线程互斥"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#gui-渲染线程-与-javascript引擎线程互斥"}},[a._v("#")]),a._v(" GUI 渲染线程 与 JavaScript引擎线程互斥")]),a._v(" "),v("p",[a._v("由于JavaScript是可操纵DOM的，如果在修改这些元素属性同时渲染界面（即JavaScript线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。因此为了防止渲染出现不可预期的结果，浏览器设置GUI渲染线程与JavaScript引擎为互斥的关系，当JavaScript引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到引擎线程空闲时立即被执行。")]),a._v(" "),v("h2",{attrs:{id:"js阻塞页面加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js阻塞页面加载"}},[a._v("#")]),a._v(" JS阻塞页面加载")]),a._v(" "),v("p",[a._v("从上面我们可以推理出，由于GUI渲染线程与JavaScript执行线程是互斥的关系，当浏览器在执行JavaScript程序的时候，GUI渲染线程会被保存在一个队列中，直到JS程序执行完成，才会接着执行。因此如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。")]),a._v(" "),v("h2",{attrs:{id:"定时触发器线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定时触发器线程"}},[a._v("#")]),a._v(" 定时触发器线程")]),a._v(" "),v("p",[a._v("浏览器定时计数器并不是由JavaScript引擎计数的, 因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确, 因此通过单独线程来计时并触发定时是更为合理的方案")]),a._v(" "),v("h2",{attrs:{id:"事件触发线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件触发线程"}},[a._v("#")]),a._v(" 事件触发线程")]),a._v(" "),v("p",[a._v("当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可以是当前执行的代码块如定时任务、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。")]),a._v(" "),v("h2",{attrs:{id:"异步http请求线程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异步http请求线程"}},[a._v("#")]),a._v(" 异步http请求线程")]),a._v(" "),v("p",[a._v("在XMLHttpRequest在连接后是通过浏览器新开一个线程请求， 将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件放到 JavaScript引擎的处理队列中等待处理。")]),a._v(" "),v("h2",{attrs:{id:"浏览器帧任务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器帧任务"}},[a._v("#")]),a._v(" 浏览器帧任务")]),a._v(" "),v("p",[a._v("浏览器：")]),a._v(" "),v("ul",[v("li",[a._v("ip：寻址的功能")]),a._v(" "),v("li",[a._v("http三次握手，四次挥手，为什么是四次")]),a._v(" "),v("li",[a._v("强缓存和协商缓存的区别")]),a._v(" "),v("li",[a._v("进程、线程、协程的区别及特点")])]),a._v(" "),v("p",[a._v("js执行过程：\n编译并创建函数的执行上下文环境")]),a._v(" "),v("p",[a._v("js执行上下文\n当遇到函数时，就会创建一个执行上下文，包含：")]),a._v(" "),v("ul",[v("li",[a._v("变量环境")]),a._v(" "),v("li",[a._v("词法环境\n"),v("ul",[v("li",[v("code",[a._v("let")]),a._v("和"),v("code",[a._v("const")]),a._v("等的块级作用域栈")])])]),a._v(" "),v("li",[a._v("outer（指向外层的执行上下文）")]),a._v(" "),v("li",[a._v("this")])]),a._v(" "),v("p",[a._v("闭包\n特殊的作用域链")]),a._v(" "),v("ul",[v("li",[a._v("不对外开放的作用域链，即执行上下文的专属的作用域链")])]),a._v(" "),v("p",[a._v("表现实现：在一个嵌套函数中，内层函数对外层函数的变量引用")]),a._v(" "),v("p",[a._v("this不会从外层继承\n严格模式下，函数的this为undefined")])])}),[],!1,null,null,null);t.default=r.exports}}]);